Object Oriented Programming:
*Objects:
  - entities in the real world
*Classes:
  - group of these entities

Access modifiers:
  - these are used to provide access.
  - private (within class)
  - default (within class, within package)
  - protected (within class, within package, outside package by subclass only), public
  - public (within class, within package, outside package by subclass only, outside package)

Getters & Setters:
  - Get: to return the value
  - Set: to modify the value
  - this: this keyword is used to refer to the current object

Static keyword:
  - static keyword in java is used to share the same variable or method of a given class.
  - a. properties
    b. functions
    c. blocks
    d. nested classes

Super keyword:
  - super keyword is used to refer immediate parent class object.
  - a. to access parent's properties.
    b. to access parent's functions.
    c. to access parent's constructor.

package:
  - Package is a group of similar types of classes, interfaces and sub packages.

(A) ENCAPSULATION:
  - Encapsulation is defined as the wrapping up of data & methods under a single unit. It also implements data hiding.

Constructors:
  - Constructor is a special method which is invoked automatically at the time of object creation.
  - Constructors have the same name as class or structure.
  - Constructors don't have a return type. (Not even void)
  - Constructors are only called once, at object creation.
  - Memory allocation happens when constructor is called.

Types of constructors:
  - Non-parameterized
  - parameterized
  - copy constructor

Shallow copy vs Deep copy:
  - In shallow copy, reference of copied object is passed.
  - In deep copy, a new reference is made with new object address to pass to the object.

(B) INHERITANCE:
  - Inheritance is when properties & methods of base class are passed on to a derived class.
   a. Single level Inheritance: 
        base class --> derived class
   b. Multi level Inheritance: 
        base class --> derived class 1 --> derived class 2
   c. Hierarchial level Inheritance: 
        base class --> derived class 1
        base class --> derived class 2
   d. Hybrid level Inheritance: 
        base class --> derived class 1
        base class --> derived class 2
        derived class 1 --> grand child class 1

(C) POLYMORPHISM:        
  - 'Poly' means 'many', 'morphism' means 'forms'.
  - Compile time polymorphism: method overloading - Multiple functions with the same name but different parameters.
  - Run time polymorphism: method overriding - Parent & child classes both contain the same function with a different definition.

(D) ABSTRACTION:
  - Hiding all the unnecessary details and showing only the important parts to the user.
  a. Abstract classes:
    * cannot create an instance of abstract class.
    * can have abstraction-abstract methods.
    * can have constructors
  b. Interfaces:
    * Interface is a blueprint of a class.
    * All methods are public, abstract & without implementation.
    * Used to achieve total abstraction.
    * Variables in the interface are final, public and static.